h1
  = @space.name 
  |  
  = link_to "View", space_path(@space), class: 'btn btn-mini'
#proofs_pane.well
  #info_pane
    h3 Proof Explorer
    p Mouse over a node to the left for a description of that trait.

javascript:
  // FIXME: clean this up
  $(function() {
    var w = 600,
        h = 600;

    var force = d3.layout.force()
        .charge(-150)
        .linkDistance(50)
        .size([w, h]);

    var svg = d3.select("#proofs_pane").append("svg")
        .attr("width", w)
        .attr("height", h);

    // See http://logogin.blogspot.com/2013/02/d3js-arrowhead-markers.html
    svg.append("defs").append("marker")
      .attr("id", "arrowhead")
      .attr("class", "link")
      .attr("refX", 6 + 3) /*must be smarter way to calculate shift*/
      .attr("refY", 2)
      .attr("markerWidth", 6)
      .attr("markerHeight", 4)
      .attr("orient", "auto")
      .append("path")
          .attr("d", "M 0,0 V 4 L6,2 Z"); //this is actual shape for arrowhead

    d3.json(document.URL + ".json", function(error, graph) {
      force
          .nodes(graph.nodes)
          .links(graph.links)
          .start();

      var link = svg.selectAll(".link")
          .data(graph.links)
        .enter().append("line")
          .attr("class", "link")
          .attr("marker-end", "url(#arrowhead)") 
          .style("stroke-width", 2);

      var focus = function(trait) {
        $('#info_pane').html('<h3>' + trait.name + '</h3>');
        if (trait.theorem) {
          $.each(graph.links, function(l) {
            if (l.target == trait.index) {
              $('#info_pane').append('<li>' + l.source.name + '</li>');
            }
          });
          $('#info_pane').append('<li>' + trait.theorem.name + '</li>');
        } else {
          $('#info_pane').append(trait.description);
        }
        MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
      }

      var unfocus = function() {
        $('#info_pane').empty();
      }

      var node = svg.selectAll(".node")
          .data(graph.nodes)
        .enter().append("circle")
          .attr("class", "node")
          .attr("r", function(d) { return d.theorem ? 5 : 10; })
          .on("mouseover", function(d) { focus(d); })
          .on("mouseout", function() { unfocus(); })
          .on("click", function(d) { window.location = "/traits/" + d.id; })
          .call(force.drag);

      node.append("title")
          .text(function(d) { return d.name; });

      force.on("tick", function() {
        node.attr("cx", function(d) { return d.x = Math.max(10, Math.min(w - 10, d.x)); })
            .attr("cy", function(d) { return d.y = Math.max(10, Math.min(h - 10, d.y)); });

        link.attr("x1", function(d) { return d.source.x; })
            .attr("y1", function(d) { return d.source.y; })
            .attr("x2", function(d) { return d.target.x; })
            .attr("y2", function(d) { return d.target.y; });
      });
    });
  });